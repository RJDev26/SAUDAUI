{"version":3,"file":"src_app_pages_register_register_module_ts.js","mappings":"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","sources":["./src/app/pages/register/register.component.ts","./src/app/pages/register/register.component.html","./src/app/pages/register/register.module.ts","./src/app/theme/utils/app-validators.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { UntypedFormGroup, UntypedFormBuilder, Validators} from '@angular/forms';\r\nimport { emailValidator, matchingPasswords } from '../../theme/utils/app-validators';\r\nimport { AppSettings } from '../../app.settings';\r\nimport { Settings } from '../../app.settings.model';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html'\r\n})\r\nexport class RegisterComponent {\r\n  public form:UntypedFormGroup;\r\n  public settings: Settings;\r\n  constructor(public appSettings:AppSettings, public fb: UntypedFormBuilder, public router:Router){\r\n    this.settings = this.appSettings.settings; \r\n    this.form = this.fb.group({\r\n      'name': [null, Validators.compose([Validators.required, Validators.minLength(3)])],\r\n      'email': [null, Validators.compose([Validators.required, emailValidator])],\r\n      'password': ['', Validators.required],\r\n      'confirmPassword': ['', Validators.required]\r\n    },{validator: matchingPasswords('password', 'confirmPassword')});\r\n  }\r\n\r\n  public onSubmit(values:Object):void {\r\n    if (this.form.valid) {\r\n      this.router.navigate(['/login']);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(){\r\n    this.settings.loadingSpinner = false; \r\n  }\r\n}","<!--<mat-sidenav-container>-->\r\n  \r\n    <div fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"h-100\">\r\n  \r\n         <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit(form.value)\" fxFlex=\"80\" fxFlex.gt-sm=\"30\" fxFlex.sm=\"60\">\r\n  \r\n              <mat-card class=\"p-0 mat-elevation-z24 box register\">\r\n                  <div fxLayout=\"column\" fxLayoutAlign=\"center center\" class=\"bg-primary box-header\">\r\n                      <button mat-fab color=\"accent\" class=\"mat-elevation-z12\" (click)=\"onSubmit(form.value);\">\r\n                          <mat-icon>person_add</mat-icon>\r\n                      </button>\r\n                      <a mat-button routerLink=\"/login\">Already have an account? Sign in!</a>\r\n                  </div>\r\n                  <mat-card-content fxLayout=\"column\" fxLayoutAlign=\"end center\" class=\"box-content\">\r\n                      <mat-card fxLayout=\"column\" fxLayoutAlign=\"center center\" class=\"mat-elevation-z12 box-content-inner\">\r\n                          <span class=\"box-content-header\">Register member</span>  \r\n                          <mat-form-field class=\"w-100\">\r\n                            <input matInput placeholder=\"Full Name\" formControlName=\"name\">\r\n                            <mat-error *ngIf=\"form.controls.name.errors?.required\">Full Name is required</mat-error>\r\n                            <mat-error *ngIf=\"form.controls.name.hasError('minlength')\">Full Name isn't long enough, minimum of 3 characters</mat-error>\r\n                          </mat-form-field>\r\n                          <mat-form-field class=\"w-100\">\r\n                              <input matInput placeholder=\"Email\" formControlName=\"email\">\r\n                              <mat-error *ngIf=\"form.controls.email.errors?.required\">Email is required</mat-error>\r\n                              <mat-error *ngIf=\"form.controls.email.hasError('invalidEmail')\">Invalid email address</mat-error>\r\n                          </mat-form-field>\r\n                          <mat-form-field class=\"w-100\">\r\n                              <input matInput placeholder=\"Password\" formControlName=\"password\" type=\"password\" minlength=\"6\">\r\n                              <mat-error *ngIf=\"form.controls.password.errors?.required\">Password is required</mat-error>\r\n                              <mat-error *ngIf=\"form.controls.password.hasError('minlength')\">Password isn't long enough, minimum of 6 characters</mat-error>\r\n                          </mat-form-field> \r\n                          <mat-form-field class=\"w-100\">\r\n                            <input matInput placeholder=\"Confirm Password\" formControlName=\"confirmPassword\" type=\"password\">\r\n                            <mat-error *ngIf=\"form.controls.confirmPassword.errors?.required\">Confirm Password is required</mat-error>\r\n                            <mat-error *ngIf=\"form.controls.confirmPassword.hasError('mismatchedPasswords')\">Passwords do not match</mat-error>\r\n                          </mat-form-field>\r\n                      </mat-card>\r\n                      <button mat-raised-button color=\"primary\" class=\"mat-elevation-z12 box-button\" type=\"submit\">SIGN UP</button>\r\n                  </mat-card-content>\r\n              </mat-card>\r\n              \r\n         </form>      \r\n    \r\n    </div>\r\n  \r\n  <!--</mat-sidenav-container>-->\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { RegisterComponent } from './register.component';\r\n\r\nexport const routes: Routes = [\r\n  { path: '', component: RegisterComponent, pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    FormsModule, \r\n    ReactiveFormsModule,\r\n    SharedModule\r\n  ],\r\n  declarations: [\r\n    RegisterComponent\r\n  ]\r\n})\r\nexport class RegisterModule { }","import { UntypedFormGroup, UntypedFormControl } from '@angular/forms';\r\n\r\nexport function emailValidator(control: UntypedFormControl): {[key: string]: any} {\r\n    var emailRegexp = /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$/;    \r\n    if (control.value && !emailRegexp.test(control.value)) {\r\n        return {invalidEmail: true};\r\n    }\r\n}\r\n\r\nexport function matchingPasswords(passwordKey: string, passwordConfirmationKey: string) {\r\n    return (group: UntypedFormGroup) => {\r\n        let password= group.controls[passwordKey];\r\n        let passwordConfirmation= group.controls[passwordConfirmationKey];\r\n        if (password.value !== passwordConfirmation.value) {\r\n            return passwordConfirmation.setErrors({mismatchedPasswords: true})\r\n        }\r\n    }\r\n}"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}