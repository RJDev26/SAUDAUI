{"version":3,"file":"default-src_app_Forms_User_change-password_change-password_component_ts-src_app_Forms_User_in-691acf.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AACkF;AACT;;;;;;;;;;;AAWlE,MAAM,uBAAuB;IAGhC,YAAoB,WAA+B,EAAS,QAAqB,EAAS,SAAgD,EAAkC,IAAS,EAAU,WAAuB;QAAlM,gBAAW,GAAX,WAAW,CAAoB;QAAS,aAAQ,GAAR,QAAQ,CAAa;QAAS,cAAS,GAAT,SAAS,CAAuC;QAAkC,SAAI,GAAJ,IAAI,CAAK;QAAU,gBAAW,GAAX,WAAW,CAAY;QAClN,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;IAC/B,CAAC;IAED,gBAAgB;QACZ,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAC/C,iBAAiB,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YAC5C,aAAa,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YACxC,iBAAiB,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YAC5C,IAAI,EAAE,EAAE;SACT,EAAE;YACC,SAAS,EAAE,IAAI,CAAC,sBAAsB,CAAC,4BAA4B;SACpE,CAAC,CAAC;IACT,CAAC;IAED,sBAAsB,CAAC,SAA2B;QAC9C,MAAM,WAAW,GAAG,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,KAAK,CAAC;QACxD,MAAM,eAAe,GAAG,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC,EAAE,KAAK,CAAC;QAEhE,IAAI,WAAW,KAAK,eAAe,EAAE;YACnC,OAAO,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC;SACrC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEI,QAAQ,CAAC,MAAc;QAC1B,IAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAC;YAC7B,MAAM,GAAG,GAAG;gBACR,IAAI,EAAE,IAAI,CAAC,MAAM;gBACjB,iBAAiB,EAAE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,iBAAiB,CAAC,EAAE,KAAK;gBACxE,aAAa,EAAE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,KAAK;aACjE;YAEH,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,GAAG,GAAE;gBAChD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBAC9C,IAAG,GAAG,CAAC,SAAS,EAAC;oBACb,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;iBAC1B;YACL,CAAC,CAAC,CAAC;SACN;IACL,CAAC;IAED,WAAW,CAAC,OAAO,EAAE,OAAO,GAAG,KAAK;QAChC,MAAM,UAAU,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACtD,MAAM,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;QAC5C,MAAM,IAAI,GAAG,OAAO,EAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;QAElC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE;YACjC,QAAQ,EAAE,IAAI;YACd,UAAU,EAAE,UAAU;SACvB,CAAC,CAAC;IACL,CAAC;IAEH,KAAK;QACD,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IAC3B,CAAC;IAGD,QAAQ;QACL,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC3B,CAAC;;8FAhEQ,uBAAuB,+cAGoH,qEAAe;qHAH1J,uBAAuB;QCbpC,wEAAoB;QAAA,0EAAe;QAAA,4DAAK;QACxC,uEAAuC;QAApC,0IAAS,WAAO,IAAC;QAClB,0EAAwC;QAC5B,gEAAK;QAAA,4DAAW;QAG9B,0EAA6H;QAAtF,mJAAY,0CAAkC,IAAC;QACpF,yEAA8B;QAClB,gEAAI;QAAA,4DAAO;QACrB,0EAAsC;QAGrB,4EAAgB;QAAA,4DAAY;QACrC,uEAAoH;QACtH,4DAAiB;QAErB,0EAAmD;QAEpC,wEAAY;QAAA,4DAAY;QACjC,uEAA4G;QAC9G,4DAAiB;QAErB,0EAAmD;QAEpC,4EAAgB;QAAA,4DAAY;QACrC,wEAAoH;QACtH,4DAAiB;QAIzB,2EAA8D;QACrB,gJAAS,WAAO,IAAC;QAAC,kEAAM;QAAA,4DAAS;QACxE,8EAAiH;QAAA,gEAAI;QAAA,4DAAS;;QA1B5H,0DAAgC;QAAhC,6FAAgC;QA0B0B,2DAAsC;QAAtC,mGAAsC;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BT;AACpB;;;;;;;;;;;AASlE,MAAM,mBAAmB;IAI5B,YAAoB,WAA+B,EAAS,SAA4C,EAAkC,IAAS,EAAU,WAA0B;QAAnK,gBAAW,GAAX,WAAW,CAAoB;QAAS,cAAS,GAAT,SAAS,CAAmC;QAAkC,SAAI,GAAJ,IAAI,CAAK;QAAU,gBAAW,GAAX,WAAW,CAAe;QAFhL,iBAAY,GAAW,IAAI,CAAC;QAC5B,wBAAmB,GAAW,IAAI,CAAC;IAG1C,CAAC;IAED,gBAAgB;QACZ,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAC3C,WAAW,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YACtC,UAAU,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YACrC,UAAU,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YACrC,OAAO,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YAClC,UAAU,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YACrC,iBAAiB,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;YAC5C,UAAU,EAAE,CAAC,EAAE,CAAC;YAChB,IAAI,EAAE,EAAE;SACT,EAAE;YACD,SAAS,EAAE,IAAI,CAAC,sBAAsB,CAAC,4BAA4B;SACpE,CAAC,CAAC;IACP,CAAC;IAED,sBAAsB,CAAC,SAAoB;QACzC,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,KAAK,CAAC;QAClD,MAAM,eAAe,GAAG,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC,EAAE,KAAK,CAAC;QAEhE,IAAI,QAAQ,KAAK,eAAe,EAAE;YAChC,OAAO,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC;SACrC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,QAAQ,CAAC,MAAc;QAC1B,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACvG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACrG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACrG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAC/F,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACrG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACnH,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACtG,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;QACrC,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE;YAC7B,2CAA2C;YAC3C,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;gBACnD,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YACzB,CAAC,EAAE,GAAG,CAAC,EAAE;gBACP,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;SACJ;IACL,CAAC;IAED,QAAQ;QACJ,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC5B,CAAC;IAED,KAAK;QACD,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IAC3B,CAAC;;sFA1DQ,mBAAmB,wUAIsF,qEAAe;iHAJxH,mBAAmB;QCXhC,wEAAoB;QAAA,sEAAW;QAAA,4DAAK;QACpC,uEAAuC;QAApC,sIAAS,WAAO,IAAC;QAChB,0EAAwC;QAC5B,gEAAK;QAAA,4DAAW;QAGhC,0EAAqH;QAAlF,+IAAY,sCAA8B,IAAC;QAC1E,yEAA8B;QAChB,gEAAI;QAAA,4DAAO;QACrB,0EAAsC;QAGrB,sEAAU;QAAA,4DAAY;QAC/B,uEAAoG;QACtG,4DAAiB;QAErB,0EAAmD;QAEpC,qEAAS;QAAA,4DAAY;QAChC,uEAAkG;QACpG,4DAAiB;QAEnB,0EAAmD;QAEpC,qEAAS;QAAA,4DAAY;QAChC,wEAAkG;QACpG,4DAAiB;QAEnB,0EAAmD;QAEpC,iEAAK;QAAA,4DAAY;QAC5B,wEAA2F;QAC7F,4DAAiB;QAEnB,0EAAmD;QAEpC,oEAAQ;QAAA,4DAAY;QAC/B,wEAAiI;QACjI,gFAA2D;QAAvC,sLAAsC;QAAC,wDAAkD;QAAA,4DAAW;QAG5H,0EAAmD;QAEpC,4EAAgB;QAAA,4DAAY;QACvC,wEAAuK;QACvK,gFAAyE;QAArD,oMAAoD;QAAC,wDAAyD;QAAA,4DAAW;QAGjJ,2EAAsE;QACP,kEAAM;QAAA,4DAAmB;QAI9F,2EAA8D;QACrB,4IAAS,WAAO,IAAC;QAAC,kEAAM;QAAA,4DAAS;QACxE,8EAA6G;QAAA,gEAAI;QAAA,4DAAS;;QAjD1H,0DAA4B;QAA5B,yFAA4B;QA+BiE,2DAA2C;QAA3C,wGAA2C;QACrE,0DAAkD;QAAlD,mHAAkD;QAMO,0DAAkD;QAAlD,+GAAkD;QAC7F,0DAAyD;QAAzD,0HAAyD;QAU9E,0DAAkC;QAAlC,+FAAkC","sources":["./src/app/Forms/User/change-password/change-password.component.ts","./src/app/Forms/User/change-password/change-password.component.html","./src/app/Forms/User/invite-user/invite-user.component.ts","./src/app/Forms/User/invite-user/invite-user.component.html"],"sourcesContent":["import { Component, Inject, OnInit } from \"@angular/core\";\r\nimport { UntypedFormBuilder, UntypedFormGroup, Validators } from \"@angular/forms\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { MasterService } from \"../../Master/master.service\";\r\nimport { AppService } from \"src/app/service/app.service\";\r\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\r\n\r\n@Component({\r\n    selector: 'change-password',\r\n    templateUrl: './change-password.component.html',\r\n    styleUrls: ['./change-password.component.scss']\r\n})\r\n\r\nexport class changePasswordComponent implements OnInit {\r\n    public changePasswordForm: UntypedFormGroup;\r\n    userId: any;\r\n    constructor(private formBuilder: UntypedFormBuilder, public snackBar: MatSnackBar, public dialogRef: MatDialogRef<changePasswordComponent>, @Inject(MAT_DIALOG_DATA) public data: any, private _appService: AppService) {\r\n        console.log(this.data);\r\n        this.userId = this.data.id;\r\n    }\r\n\r\n    bindFormControls() {\r\n        this.changePasswordForm = this.formBuilder.group({         \r\n          'CurrentPassword': ['', Validators.required],\r\n          'NewPassword': ['', Validators.required],\r\n          'ConfirmPassword': ['', Validators.required],\r\n          'id': []\r\n        }, {\r\n            validator: this.passwordMatchValidator // Add custom validator here\r\n          });\r\n    }\r\n\r\n    passwordMatchValidator(formGroup: UntypedFormGroup): { [key: string]: boolean } | null {\r\n        const newPassword = formGroup.get('NewPassword')?.value;\r\n        const confirmPassword = formGroup.get('ConfirmPassword')?.value;\r\n    \r\n        if (newPassword !== confirmPassword) {\r\n          return { 'passwordMismatch': true };\r\n        }\r\n        return null;\r\n      }\r\n\r\n    public onSubmit(values: Object): void {    \r\n        if(this.changePasswordForm.valid){\r\n            const req = {\r\n                \"id\": this.userId,\r\n                \"currentPassword\": this.changePasswordForm.get('CurrentPassword')?.value,\r\n                \"newPassword\": this.changePasswordForm.get('NewPassword')?.value,\r\n              }\r\n\r\n            this._appService.changePassword(req).subscribe(res=>{\r\n                this.showToaster(res.message, !res.isSuccess);\r\n                if(res.isSuccess){\r\n                    this.dialogRef.close();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    showToaster(message, isError = false) {\r\n        const panelClass = isError ? ['red-text'] : undefined;\r\n        const label = isError ? \"Error\" : \"Success\";\r\n        const time = isError? 6000 : 3000;\r\n      \r\n        this.snackBar.open(message, label, {\r\n          duration: time,\r\n          panelClass: panelClass,\r\n        });\r\n      }\r\n\r\n    close() {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n\r\n    ngOnInit() {\r\n       this.bindFormControls(); \r\n    }\r\n}","<h2 class=\"heading\">Change Password</h2>\r\n<a (click)=\"close()\" class=\"close-btn\">\r\n  <span class=\"material-symbols-outlined\">\r\n    <mat-icon>close</mat-icon>\r\n  </span>\r\n</a>\r\n<form [formGroup]=\"changePasswordForm\" (ngSubmit)=\"onSubmit(changePasswordForm.value)\" fxLayout=\"row wrap\" class=\"user-form\">\r\n  <div class=\"white-block pb-5\">\r\n    <h3><span>Item</span></h3>\r\n    <div class=\"tab-party-details-parent\">\r\n      <div fxFlex=\"100\" fxFlex.gt-sm=\"50\" fxFlex.sm=\"50\">\r\n        <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n          <mat-label>Current Password</mat-label>\r\n            <input matInput autocomplete=\"off\" placeholder=\"Current Password\" formControlName=\"CurrentPassword\" type=\"password\">\r\n          </mat-form-field>\r\n      </div>\r\n      <div fxFlex=\"100\" fxFlex.gt-sm=\"50\" fxFlex.sm=\"50\">\r\n        <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n          <mat-label>New Password</mat-label>\r\n            <input matInput autocomplete=\"off\" placeholder=\"New Password\" formControlName=\"NewPassword\" type=\"password\">\r\n          </mat-form-field>\r\n      </div>\r\n      <div fxFlex=\"100\" fxFlex.gt-sm=\"50\" fxFlex.sm=\"50\">\r\n        <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n          <mat-label>Confirm Password</mat-label>\r\n            <input matInput autocomplete=\"off\" placeholder=\"Confirm Password\" formControlName=\"ConfirmPassword\" type=\"password\">\r\n          </mat-form-field>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div fxFlex=\"100\" class=\"mt-2 text-center space-between-btns\">\r\n    <button mat-raised-button color=\"warn\" (click)=\"close()\">Cancel</button>            \r\n    <button mat-raised-button color=\"primary\" class=\"uppercase\" [disabled]=\"!changePasswordForm.valid\" type=\"submit\">Save</button> \r\n  </div>\r\n</form>","import { Component, Inject, OnInit } from \"@angular/core\";\r\nimport { FormGroup, UntypedFormBuilder, UntypedFormGroup, Validators } from \"@angular/forms\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { MasterService } from \"../../Master/master.service\";\r\nimport { forkJoin } from \"rxjs\";\r\n\r\n@Component({\r\n    selector: 'invite-user-dialog',\r\n    templateUrl: './invite-user.component.html',\r\n    styleUrls: ['./invite-user.component.scss']\r\n})\r\nexport class InviteUserComponent implements OnInit {\r\n    public inviteUserForm: UntypedFormGroup;\r\n    public passwordHide:boolean = true;\r\n    public confirmPasswordHide:boolean = true;\r\n    constructor(private formBuilder: UntypedFormBuilder, public dialogRef: MatDialogRef<InviteUserComponent>, @Inject(MAT_DIALOG_DATA) public data: any, private _appService: MasterService) {\r\n       \r\n    }\r\n\r\n    bindFormControls() {\r\n        this.inviteUserForm = this.formBuilder.group({         \r\n          'FirstName': ['', Validators.required],\r\n          'LastName': ['', Validators.required],\r\n          'userName': ['', Validators.required],\r\n          'email': ['', Validators.required],\r\n          'Password': ['', Validators.required],\r\n          'ConfirmPassword': ['', Validators.required],\r\n          'isActive': [''],\r\n          'id': []\r\n        }, {\r\n          validator: this.passwordMatchValidator // Add custom validator here\r\n        });\r\n    }\r\n\r\n    passwordMatchValidator(formGroup: FormGroup): { [key: string]: boolean } | null {\r\n      const password = formGroup.get('Password')?.value;\r\n      const confirmPassword = formGroup.get('ConfirmPassword')?.value;\r\n  \r\n      if (password !== confirmPassword) {\r\n        return { 'passwordMismatch': true };\r\n      }\r\n      return null;\r\n    }\r\n\r\n    public onSubmit(values: Object): void {    \r\n        this.inviteUserForm.controls['FirstName'].setValue(String(this.inviteUserForm.get('FirstName').value));\r\n        this.inviteUserForm.controls['LastName'].setValue(String(this.inviteUserForm.get('LastName').value));\r\n        this.inviteUserForm.controls['userName'].setValue(String(this.inviteUserForm.get('userName').value));\r\n        this.inviteUserForm.controls['email'].setValue(String(this.inviteUserForm.get('email').value));\r\n        this.inviteUserForm.controls['Password'].setValue(String(this.inviteUserForm.get('Password').value));\r\n        this.inviteUserForm.controls['ConfirmPassword'].setValue(String(this.inviteUserForm.get('ConfirmPassword').value));\r\n        this.inviteUserForm.controls['isActive'].setValue(Boolean(this.inviteUserForm.get('isActive').value));\r\n        var body = this.inviteUserForm.value;\r\n        if (this.inviteUserForm.valid) {\r\n          //const body = JSON.stringify(addFormData);\r\n          this._appService.createUser(body).subscribe(result => {\r\n            this.dialogRef.close();\r\n          }, err => {\r\n            console.log(err);\r\n          });\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.bindFormControls();\r\n    }\r\n\r\n    close(): void {\r\n        this.dialogRef.close();\r\n    }\r\n}","<h2 class=\"heading\">Create User</h2>\r\n<a (click)=\"close()\" class=\"close-btn\">\r\n    <span class=\"material-symbols-outlined\">\r\n      <mat-icon>close</mat-icon>\r\n    </span>\r\n</a>\r\n<form [formGroup]=\"inviteUserForm\" (ngSubmit)=\"onSubmit(inviteUserForm.value)\" fxLayout=\"row wrap\" class=\"user-form\">\r\n    <div class=\"white-block pb-5\">\r\n        <h3><span>Item</span></h3>\r\n        <div class=\"tab-party-details-parent\">\r\n          <div fxFlex=\"100\" fxFlex.gt-sm=\"20\" fxFlex.sm=\"50\">\r\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n              <mat-label>First Name</mat-label>\r\n                <input matInput autocomplete=\"off\" placeholder=\"First Name\" formControlName=\"FirstName\" type=\"text\">\r\n              </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"100\" fxFlex.gt-sm=\"20\" fxFlex.sm=\"50\">\r\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n              <mat-label>Last Name</mat-label>\r\n              <input matInput autocomplete=\"off\" placeholder=\"Last Name\" formControlName=\"LastName\" type=\"text\">\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"100\" fxFlex.gt-sm=\"20\" fxFlex.sm=\"50\">\r\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n              <mat-label>User Name</mat-label>\r\n              <input matInput autocomplete=\"off\" placeholder=\"User Name\" formControlName=\"userName\" type=\"text\">\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"100\" fxFlex.gt-sm=\"20\" fxFlex.sm=\"50\">\r\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n              <mat-label>Email</mat-label>\r\n              <input matInput autocomplete=\"off\" placeholder=\"Email\" formControlName=\"email\" type=\"text\">\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"100\" fxFlex.gt-sm=\"20\" fxFlex.sm=\"50\">\r\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n              <mat-label>Password</mat-label>\r\n              <input matInput autocomplete=\"off\" placeholder=\"Password\" formControlName=\"Password\" [type]=\"passwordHide ? 'password' : 'text'\">\r\n              <mat-icon matSuffix (click)=\"passwordHide = !passwordHide\">{{passwordHide ? 'visibility' : 'visibility_off'}}</mat-icon>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"100\" fxFlex.gt-sm=\"20\" fxFlex.sm=\"50\">\r\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n              <mat-label>Confirm Password</mat-label>\r\n              <input matInput autocomplete=\"off\" placeholder=\"Confirm Password\" formControlName=\"ConfirmPassword\" type=\"password\" [type]=\"confirmPasswordHide ? 'password' : 'text'\">\r\n              <mat-icon matSuffix (click)=\"confirmPasswordHide = !confirmPasswordHide\">{{confirmPasswordHide ? 'visibility' : 'visibility_off'}}</mat-icon>\r\n            </mat-form-field>\r\n          </div>\r\n          <div fxFlex=\"100\" fxFlex.gt-sm=\"20\" fxFlex.sm=\"50\" class=\"pt-8 pl-10\">\r\n            <mat-slide-toggle formControlName=\"isActive\" color=\"primary\">Active</mat-slide-toggle>\r\n          </div>\r\n        </div>\r\n    </div>\r\n    <div fxFlex=\"100\" class=\"mt-2 text-center space-between-btns\">\r\n      <button mat-raised-button color=\"warn\" (click)=\"close()\">Cancel</button>            \r\n      <button mat-raised-button color=\"primary\" class=\"uppercase\" [disabled]=\"!inviteUserForm.valid\" type=\"submit\">Save</button> \r\n  </div>\r\n</form>"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}